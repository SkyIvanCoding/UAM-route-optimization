!pip install numpy pandas ortools
###
from ortools.constraint_solver import routing_enums_pb2
from ortools.constraint_solver import pywrapcp
import math

def create_data_model():
    """Create the data for the problem."""
    location_coordinates = [(37.618889, -122.375), # localtion 0 - the depot
                            (37.79304, -122.39888),  # localtion 1 - the depot
                            (37.66116, -122.47074),  # localtion 2 - the depot
                            (37.47928, -122.22513),  # localtion 3 - the depot
                            (37.40574, -122.12377),  # localtion 4 - the depot
                            (37.37864, -122.07667),  # localtion 5 - the depot
                            (37.31667, -122.03403),  # localtion 6 - the depot
                            (37.36707, -121.90355),  # localtion 7 - the depot
                            (37.53475, -122.03115),  # localtion 8 - the depot
                            (37.69473, -121.90183),  # localtion 9 - the depot
                            (37.69538, -122.15049),  # localtion 10 - the depot
                            (37.72939, -122.22708),  # localtion 11 - the depot
                            (37.85068, -122.22838)]  # localtion 12 - the depot
    
    # Converting float data (location_coordinates) to integer for measuring distance in "m"
    location_coordinates = [(10000 * coord[0], 10000 * coord[1]) for coord in location_coordinates]
    location_coordinates = [(round(coord[0]), round(coord[1])) for coord in location_coordinates]
    
    
    data = {}


    # Making a list with Euclidean distances among locations
    distances = []
    for i in range(len(location_coordinates)):
        row = []
        for j in range(len(location_coordinates)):
            distance = round(math.sqrt((location_coordinates[i][0]-location_coordinates[j][0])**2 + (location_coordinates[i][1]-location_coordinates[j][1])**2), 2)
            row.append(distance)
        distances.append(row)
    
    data['distance_matrix'] = distances

    data['pickups_deliveries'] = [[12, 1],
                                  [2, 11],
                                  [3, 4],
                                  [5, 7],
                                  [8, 6],
                                  [9, 10]]

    data['num_vehicles'] = 3
    data['depot'] = 0

    return data
    
    def print_solution(data, manager, routing, solution):
    """Print solution on console."""
    print(f'Objective: {solution.ObjectiveValue()}')
    total_distance = 0
    for vehicle_id in range(data['num_vehicles']):
        index = routing.Start(vehicle_id)
        plan_output = 'Route for vehicle {}:\n'.format(vehicle_id)
        route_distance = 0
        while not routing.IsEnd(index):
            plan_output += '{} -> '.format(manager.IndexToNode(index))
            previous_index = index
            index = solution.Value(routing.NextVar(index))
            route_distance += routing.GetArcCostForVehicle(previous_index, index, vehicle_id)
        plan_output += '{}\n'.format(manager.IndexToNode(index))
        plan_output += 'Distance of the route: {}m\n'.format(route_distance)
        print(plan_output)
        total_distance += route_distance
    print('Total Distance of all routes: {}m'.format(total_distance))
    
    
    def main():
    """Entry point of the program."""
    # Instantiate the data problem.
    data = create_data_model()

    # Create the routing index manager.
    manager = pywrapcp.RoutingIndexManager(len(data['distance_matrix']), data['num_vehicles'], data['depot'])

    # Create Routing Model.
    routing = pywrapcp.RoutingModel(manager)

    # Define cost of each arc.
    def distance_callback(from_index, to_index):
        """Return the manahattan distance between the two nodes."""
        # Convert from routing variable Index to distance matrix NodeIndex.
        from_node = manager.IndexToNode(from_index)
        to_node = manager.IndexToNode(to_index)
        return data['distance_matrix'][from_node][to_node]

    transit_callback_index = routing.RegisterTransitCallback(distance_callback)
    routing.SetArcCostEvaluatorOfAllVehicles(transit_callback_index)

    # Add Distance constraint.
    dimension_name = 'Distance'
    routing.AddDimension(
        transit_callback_index,
        0, # no slack
        30000, # vehicle maximum travel distance
        True, # start cumul to zero
        dimension_name)

    distance_dimension = routing.GetDimensionOrDie(dimension_name)
    distance_dimension.SetGlobalSpanCostCoefficient(100)

    # Define Transportation Requests.
    for request in data['pickups_deliveries']:
        pickup_index = manager.NodeToIndex(request[0])
        delivery_index = manager.NodeToIndex(request[1])
        routing.AddPickupAndDelivery(pickup_index, delivery_index)
        routing.solver().Add(
            routing.VehicleVar(pickup_index) == routing.VehicleVar(delivery_index)
        )
        routing.solver().Add(
            distance_dimension.CumulVar(pickup_index) <= distance_dimension.CumulVar(delivery_index)
        )
    
    # Setting first solution heuristic.
    search_parameters = pywrapcp.DefaultRoutingSearchParameters()
    search_parameters.first_solution_strategy = (
        routing_enums_pb2.FirstSolutionStrategy.PARALLEL_CHEAPEST_INSERTION
    )

    # Solve the problem.
    solution = routing.SolveWithParameters(search_parameters)

    # Print solution on console.
    if solution:
        print_solution(data, manager, routing, solution)

# execuate the main function and get the results
main()
